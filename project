#include <iostream>
#include <string>

using namespace std;

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    return 0;
}

int applyOperator(int a, int b, char op) {
    switch (op) {
    case '+':
        return a + b;
    case '-':
        return a - b;
    case '*':
        return a * b;
    case '/':
        return a / b;
    }
    return 0;
}

int evaluateExpression(const string& expression) {
    int values[100];
    char operators[100];
    int valueIndex = 0;
    int operatorIndex = 0;

    for (int i = 0; i < expression.length(); i++) {
        if (expression[i] == ' ')
            continue;

        if (isdigit(expression[i])) {
            // Обробка операнду
            int operand = 0;
            while (i < expression.length() && isdigit(expression[i])) {
                operand = operand * 10 + (expression[i] - '0');
                i++;
            }
            i--;
            values[valueIndex++] = operand;
        }
        else if (expression[i] == '(') {
            // Додаємо ліву дужку до масиву операторів
            operators[operatorIndex++] = expression[i];
        }
        else if (expression[i] == ')') {
            // Обробка правої дужки
            while (operatorIndex > 0 && operators[operatorIndex - 1] != '(') {
                int operand2 = values[--valueIndex];
                int operand1 = values[--valueIndex];
                char op = operators[--operatorIndex];

                int result = applyOperator(operand1, operand2, op);
                values[valueIndex++] = result;
            }

            if (operatorIndex > 0)
                operatorIndex--; // Видаляємо ліву дужку з масиву операторів
        }
        else if (isOperator(expression[i])) {
            // Обробка оператора
            while (operatorIndex > 0 && getPrecedence(operators[operatorIndex - 1]) >= getPrecedence(expression[i])) {
                int operand2 = values[--valueIndex];
                int operand1 = values[--valueIndex];
                char op = operators[--operatorIndex];

                int result = applyOperator(operand1, operand2, op);
                values[valueIndex++] = result;
            }

            operators[operatorIndex++] = expression[i]; // Додаємо поточний оператор до масиву операторів
        }
    }

    // Обробка залишкових операторів
    while (operatorIndex > 0) {
        int operand2 = values[--valueIndex];
        int operand1 = values[--valueIndex];
        char op = operators[--operatorIndex];

        int result = applyOperator(operand1, operand2, op);
        values[valueIndex++] = result;
    }

    return values[0]; // Повертаємо остаточний результат
}

int main() {
    string expression;
    cout << "Enter an arithmetic expression: ";
    getline(cin, expression);

    int result = evaluateExpression(expression);
    cout << "Result: " << result << endl;
    
}
